; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=riscv32 -mattr=+m -mattr=+xcvsimd -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

; Extra tests for extract.b, extractu.b, extract.h, extractu.h

declare i32 @llvm.riscv.cv.simd.extract.h(i32, i32)

define i32 @test.cv.extract.h(i32 %a) {
; CHECK-LABEL: test.cv.extract.h:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extract.h a0, a0, 63
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.extract.h(i32 %a, i32 255)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.simd.extract.b(i32, i32)

define i32 @test.cv.extract.b(i32 %a) {
; CHECK-LABEL: test.cv.extract.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extract.b a0, a0, 63
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.extract.b(i32 %a, i32 255)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.simd.extractu.h(i32, i32)

define i32 @test.cv.extractu.h(i32 %a) {
; CHECK-LABEL: test.cv.extractu.h:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extractu.h a0, a0, 63
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.extractu.h(i32 %a, i32 255)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.simd.extractu.b(i32, i32)

define i32 @test.cv.extractu.b(i32 %a) {
; CHECK-LABEL: test.cv.extractu.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extractu.b a0, a0, 63
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.extractu.b(i32 %a, i32 255)
  ret i32 %1
}

